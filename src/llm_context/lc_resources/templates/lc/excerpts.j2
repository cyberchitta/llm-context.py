{% set code_outline_excerpts = excerpts | selectattr("metadata.processor_type", "equalto", "code-outliner") | list %}
{% set sfc_excerpts = excerpts | selectattr("metadata.processor_type", "equalto", "sfc-excerpter") | list %}

{% if code_outline_excerpts %}
## Code Outlines - Implementation Retrieval

Smart outlines highlighting important definitions in the codebase. These show function/class signatures while omitting implementation details to reduce token usage.

{% if sample_definitions %}
**Get specific implementations:**
{% if tools_available %}
```json
{
  "root_path": "{{ abs_root_path }}",
  "param_type": "i", 
  "data": {{ sample_definitions | tojson }},
  "timestamp": {{ context_timestamp }}
}
```
{% else %}
```bash
lc-missing -i {{ sample_definitions | tojson | tojson }} -t {{ context_timestamp }}
```
{% endif %}
{% endif %}

{% for item in code_outline_excerpts %}
{{ item.rel_path }}
॥๛॥
{{ item.content }}
॥๛॥
{% endfor %}
{% endif %}

{% if sfc_excerpts %}
## Content Excerpts - Key Sections

Excerpted content showing important sections from files. These sections are configurable per file type:

**Get excluded sections:**
{% set sample_sfc_file = sfc_excerpts | first %}
{% if sample_sfc_file %}
{% if tools_available %}
```json
{
  "root_path": "{{ abs_root_path }}",
  "param_type": "e",
  "data": ["{{ sample_sfc_file.rel_path }}"], 
  "timestamp": {{ context_timestamp }}
}
```
{% else %}
```bash
lc-missing -e "[\"{{ sample_sfc_file.rel_path }}\"]" -t {{ context_timestamp }}
```
{% endif %}
{% endif %}

{% for item in sfc_excerpts %}
{{ item.rel_path }}
॥๛॥
{{ item.content }}
॥๛॥
{% endfor %}
{% endif %}
